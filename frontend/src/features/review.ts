import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { review } from "../api/index"
import { reviewCreateType, reviewUpdateType } from "../api/reqType"

export interface ReviewState {
  restoId: number
  content: string
  rating: number
}

const initialState: ReviewState = {
  restoId: -1,
  content: "empty",
  rating: -1,
}

// typically used to make async requests.
export const createReviewAsync = createAsyncThunk(
  "review/create",
  async (reviewData: reviewCreateType) => {
    const response = await review.create(reviewData)
    return response
  }
)

export const getReviewAsync = createAsyncThunk(
  "review/get",
  async (reviewId: number) => {
    const response = await review.get(reviewId)
    return response
  }
)

export const deleteReviewAsync = createAsyncThunk(
  "review/delete",
  async (reviewId: number) => {
    const response = await review.delete(reviewId)
    return response
  }
)

export const updateReviewAsync = createAsyncThunk(
  "review/update",
  async (reviewData: reviewUpdateType) => {
    const response = await review.update(reviewData)
    return response
  }
)

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createReviewAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export default counterSlice.reducer
